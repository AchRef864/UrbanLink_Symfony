<?php

// autoload_real.php @generated by Composer

<<<<<<< Updated upstream
class ComposerAutoloaderInit55e86e83c3a02c9d1089d3ca3c0ebfdf
=======
class ComposerAutoloaderInit3709df1ef2ef89ac5d9d406b39933635
>>>>>>> Stashed changes
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

<<<<<<< Updated upstream
        spl_autoload_register(array('ComposerAutoloaderInit55e86e83c3a02c9d1089d3ca3c0ebfdf', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInit55e86e83c3a02c9d1089d3ca3c0ebfdf', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInit55e86e83c3a02c9d1089d3ca3c0ebfdf::getInitializer($loader));

        $loader->register(true);

        $filesToLoad = \Composer\Autoload\ComposerStaticInit55e86e83c3a02c9d1089d3ca3c0ebfdf::$files;
=======
        spl_autoload_register(array('ComposerAutoloaderInit3709df1ef2ef89ac5d9d406b39933635', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInit3709df1ef2ef89ac5d9d406b39933635', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInit3709df1ef2ef89ac5d9d406b39933635::getInitializer($loader));

        $loader->register(true);

        $filesToLoad = \Composer\Autoload\ComposerStaticInit3709df1ef2ef89ac5d9d406b39933635::$files;
>>>>>>> Stashed changes
        $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

                require $file;
            }
        }, null, null);
        foreach ($filesToLoad as $fileIdentifier => $file) {
            $requireFile($fileIdentifier, $file);
        }

        return $loader;
    }
}
