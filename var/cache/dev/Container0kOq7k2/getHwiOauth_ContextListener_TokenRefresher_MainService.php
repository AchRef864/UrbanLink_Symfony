<?php

namespace Container0kOq7k2;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getHwiOauth_ContextListener_TokenRefresher_MainService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'hwi_oauth.context_listener.token_refresher.main' shared service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\Http\Firewall\RefreshAccessTokenListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'hwi'.\DIRECTORY_SEPARATOR.'oauth-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'Http'.\DIRECTORY_SEPARATOR.'Firewall'.\DIRECTORY_SEPARATOR.'AbstractRefreshAccessTokenListener.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'hwi'.\DIRECTORY_SEPARATOR.'oauth-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'Http'.\DIRECTORY_SEPARATOR.'Firewall'.\DIRECTORY_SEPARATOR.'RefreshAccessTokenListener.php';

        $a = ($container->privates['security.authenticator.oauth.main'] ?? $container->load('getSecurity_Authenticator_Oauth_MainService'));

        if (isset($container->privates['hwi_oauth.context_listener.token_refresher.main'])) {
            return $container->privates['hwi_oauth.context_listener.token_refresher.main'];
        }

        $container->privates['hwi_oauth.context_listener.token_refresher.main'] = $instance = new \HWI\Bundle\OAuthBundle\Security\Http\Firewall\RefreshAccessTokenListener($a);

        $instance->setTokenStorage(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
        $instance->setResourceOwnerMap(($container->services['hwi_oauth.resource_ownermap.main'] ?? $container->load('getHwiOauth_ResourceOwnermap_MainService')));

        return $instance;
    }
}
