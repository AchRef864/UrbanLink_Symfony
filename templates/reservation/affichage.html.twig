{% extends 'basef.html.twig' %}

{% block title %}Trajets List{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    /* Styles pour le chatbot popup */
    .chatbot-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: none;
    }

    .chatbot-container {
        position: fixed;
        bottom: 80px;
        right: 30px;
        width: 400px;
        height: 600px;
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        z-index: 1001;
        display: none;
    }

    .chatbot-header {
        background-color: #dc3545;
        color: white;
        padding: 15px;
        font-size: 18px;
        text-align: center;
        font-weight: bold;
    }

    .chatbot-messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #fafafa;
    }

    .chatbot-message {
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 18px;
        max-width: 80%;
        word-wrap: break-word;
        animation: fadeIn 0.3s ease-in-out;
    }

    .bot-message {
        background-color: #f0f0f0;
        align-self: flex-start;
    }

    .user-message {
        background-color: #dc3545;
        color: white;
        align-self: flex-end;
    }

    .chatbot-input {
        display: flex;
        padding: 15px;
        border-top: 1px solid #ddd;
        background-color: #fff;
    }

    .chatbot-input input {
        flex: 1;
        padding: 10px 15px;
        border: 1px solid #ccc;
        border-radius: 25px;
        outline: none;
    }

    .chatbot-input button {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 10px 15px;
        margin-left: 10px;
        border-radius: 25px;
        cursor: pointer;
    }

    .chatbot-suggestions {
        padding: 10px;
        background-color: #fff;
        border-top: 1px solid #eee;
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .chatbot-suggestion {
        padding: 8px 12px;
        border-radius: 20px;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        cursor: pointer;
        font-size: 13px;
        transition: all 0.2s;
    }

    .chatbot-suggestion:hover {
        background-color: #e2e6ea;
    }

    .sos-button {
        position: fixed;
        bottom: 25px;
        right: 25px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        z-index: 999;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
        0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(220,53,69, 0.4); }
        70% { transform: scale(1.1); box-shadow: 0 0 0 15px rgba(220,53,69, 0); }
        100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(220,53,69, 0); }
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>
{% endblock %}

{% block body %}
  <!-- Bouton SOS flottant -->
  <button id="sosButton" class="sos-button">SOS</button>

  <!-- Chatbot Popup -->
  <div id="chatbotOverlay" class="chatbot-overlay"></div>
  <div id="chatbotPopup" class="chatbot-container">
    <div class="chatbot-header">
      ðŸ†˜ Assistant d'Urgence
    </div>
    <div class="chatbot-messages" id="chatbotMessages">
      <div class="chatbot-message bot-message">
        ðŸ‘‹ Bonjour ! Je suis votre assistant pour les situations d'urgence. Posez-moi une question ou cliquez sur un des boutons ci-dessous.
      </div>
    </div>
    <div class="chatbot-suggestions">
      <div class="chatbot-suggestion" onclick="sendSuggestion('BrÃ»lure')">ðŸ”¥ BrÃ»lure</div>
      <div class="chatbot-suggestion" onclick="sendSuggestion('Saignement')">ðŸ©¸ Saignement</div>
      <div class="chatbot-suggestion" onclick="sendSuggestion('Inconscience')">ðŸ˜µ Inconscience</div>
      <div class="chatbot-suggestion" onclick="sendSuggestion('Appeler les secours')">ðŸš‘ Secours</div>
    </div>
    <div class="chatbot-input">
      <input type="text" id="userMessage" placeholder="Ã‰crivez ici...">
      <button id="sendMessage">Envoyer</button>
    </div>
  </div>

  <!-- Le reste de votre contenu existant -->
  <div class="container mx-auto px-2 py-6">
    {# Header with Search and Add Button - Nouvelle disposition #}
    <div class="flex flex-col space-y-4 mb-6">
      {# PremiÃ¨re ligne avec titre et boutons #}
      <div class="flex justify-between items-center">
        <h2 class="text-lg font-semibold text-gray-800">Trajets Timeline</h2>
        <div class="flex space-x-2">
          {# Weather Button #}
          <a href="{{ path('app_wathercontroller') }}" 
             class="inline-flex items-center px-3 py-1.5 bg-blue-100 border border-transparent rounded-md font-semibold text-xs text-blue-800 hover:bg-blue-200 transition-colors duration-200">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
              Consult wather
          </a>
        </div>
      </div>
      
      {# DeuxiÃ¨me ligne avec barre de recherche centrÃ©e #}
      <div class="flex justify-center">
        <form method="get" action="{{ path('reservation_affichage') }}" class="w-full max-w-md">
          <div class="relative flex">
            <input type="text" 
                   name="search" 
                   value="{{ search_term }}" 
                   placeholder="Rechercher un trajet par Lieu de dÃ©part ou Destination..." 
                   class="w-full px-4 py-2.5 text-sm border border-gray-300 rounded-l-lg focus:ring-blue-500 focus:border-blue-500">
            {% if search_term %}
              <a href="{{ path('reservation_affichage') }}" class="absolute right-12 top-3 text-gray-400 hover:text-gray-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </a>
            {% endif %}
            <button type="submit" class="px-4 py-2.5 bg-gray-100 text-gray-800 border border-l-0 border-gray-300 rounded-r-lg hover:bg-gray-200 flex items-center justify-center transition-colors duration-200">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        </form>
      </div>
    </div>
    
    {# Filter Buttons #}
    <div class="flex space-x-2 mb-6">
      <a href="{{ path('reservation_affichage', {'search': search_term}) }}" 
         class="px-3 py-1 text-xs rounded-full {{ not current_filter ? 'bg-gray-800 text-white' : 'bg-gray-200 text-gray-800' }}">
          Tous
      </a>
      <a href="{{ path('reservation_affichage', {'filter_type': 'PublicTransport', 'search': search_term}) }}" 
         class="px-3 py-1 text-xs rounded-full {{ current_filter == 'PublicTransport' ? 'bg-blue-800 text-white' : 'bg-blue-200 text-blue-800' }}">
          Transport Public
      </a>
      <a href="{{ path('reservation_affichage', {'filter_type': 'Carpooling', 'search': search_term}) }}" 
         class="px-3 py-1 text-xs rounded-full {{ current_filter == 'Carpooling' ? 'bg-green-800 text-white' : 'bg-green-200 text-green-800' }}">
          Covoiturage
      </a>
    </div>
    
    {# Results Count #}
    {% if search_term or current_filter %}
      <div class="mb-4 text-sm text-gray-600">
        {% if trajets|length > 0 %}
          {{ trajets|length }} rÃ©sultat(s) trouvÃ©(s)
          {% if search_term %} pour "{{ search_term }}"{% endif %}
          {% if current_filter == 'PublicTransport' %} (Transport Public){% endif %}
          {% if current_filter == 'Carpooling' %} (Covoiturage){% endif %}
        {% endif %}
      </div>
    {% endif %}
    
    {# Trajets List #}
    <div class="space-y-4">
      {% for trajet in trajets %}
      <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200">
        <div class="flex justify-between items-start">
          <div>
            <h3 class="font-medium text-gray-900">{{ trajet.departure }} â†’ {{ trajet.destination }}</h3>
            <div class="mt-1 text-xs text-gray-500">
              <span class="font-medium">{{ trajet.departureTime ? trajet.departureTime|date('d/m/Y H:i') : 'N/A' }}</span>
              <span class="mx-1">â†’</span>
              <span class="font-medium">{{ trajet.arrivalTime ? trajet.arrivalTime|date('d/m/Y H:i') : 'N/A' }}</span>
            </div>
          </div>
          <span class="px-2 py-1 text-xs font-semibold rounded-full 
            {% if trajet.typeTransport == 'PublicTransport' %}
              bg-blue-100 text-blue-800
            {% else %}
              bg-green-100 text-green-800
            {% endif %}">
            {{ trajet.typeTransport ?? 'N/A' }}
          </span>
        </div>
        
        <div class="mt-2 text-sm text-gray-600">
          <div class="grid grid-cols-4 gap-2">
            <div>
              <span class="font-medium">Distance:</span> {{ trajet.distance|number_format(2) }} km
            </div>
            <div>
              <span class="font-medium">DurÃ©e:</span> 
              {% if trajet.duration %}
                {{ trajet.duration }}
              {% else %}
                N/A
              {% endif %}
            </div>
            <div>
              <span class="font-medium">Prix:</span> {{ trajet.price|number_format(2) }} â‚¬
            </div>
            <div>
              <span class="font-medium">Places:</span> 
              {% if trajet.availableSeats is not null %}
                {{ trajet.availableSeats }}
              {% else %}
                N/A
              {% endif %}
            </div>
          </div>
        </div>
        
        <div class="mt-3 flex justify-end space-x-2">
          <a href="{{ path('reservation_new', {'trajetId': trajet.id}) }}"
             class="inline-block px-6 py-3 font-bold text-center text-white uppercase align-middle transition-all rounded-lg cursor-pointer bg-gradient-to-tl from-blue-800 to-blue-500 leading-normal text-xs ease-in tracking-tight-rem shadow-md hover:shadow-lg active:shadow-inner transform hover:-translate-y-0.5 active:translate-y-0">
            RÃ©server
          </a>
        </div>
      </div>
      {% else %}
      <div class="text-center py-8 text-gray-500">
        {% if search_term %}
          Aucun trajet trouvÃ© pour "{{ search_term }}"
          {% if current_filter == 'PublicTransport' %} (Transport Public){% endif %}
          {% if current_filter == 'Carpooling' %} (Covoiturage){% endif %}
        {% else %}
          Aucun trajet trouvÃ©.
        {% endif %}
      </div>
      {% endfor %}
    </div>
  </div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Gestion de l'affichage du chatbot
    const sosButton = document.getElementById('sosButton');
    const chatbotOverlay = document.getElementById('chatbotOverlay');
    const chatbotPopup = document.getElementById('chatbotPopup');
    
    sosButton.addEventListener('click', function() {
        chatbotOverlay.style.display = 'block';
        chatbotPopup.style.display = 'flex';
    });
    
    chatbotOverlay.addEventListener('click', function() {
        chatbotOverlay.style.display = 'none';
        chatbotPopup.style.display = 'none';
    });

    // FonctionnalitÃ© du chatbot
    const messagesContainer = document.getElementById('chatbotMessages');
    const userInput = document.getElementById('userMessage');
    const sendButton = document.getElementById('sendMessage');

    function sendMessage() {
        const messageText = userInput.value.trim();
        if (messageText === '') return;

        addMessage(messageText, 'user-message');
        userInput.value = '';

        fetch('{{ path('app_chatbot_message') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'message=' + encodeURIComponent(messageText)
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                addMessage(data.message, 'bot-message');
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            addMessage("DÃ©solÃ©, une erreur est survenue.", 'bot-message');
        });
    }

    function addMessage(text, className) {
        const msg = document.createElement('div');
        msg.className = 'chatbot-message ' + className;
        msg.textContent = text;
        messagesContainer.appendChild(msg);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    window.sendSuggestion = function(text) {
        userInput.value = text;
        sendMessage();
    };

    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') sendMessage();
    });

    // Fonction de confirmation de suppression
    window.confirmDelete = function(trajetId) {
        Swal.fire({
            title: 'ÃŠtes-vous sÃ»r?',
            text: "Vous ne pourrez pas annuler cette action!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Oui, supprimer!',
            cancelButtonText: 'Annuler'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById('delete-form-' + trajetId).submit();
            }
        });
    };
});
</script>
{% endblock %}