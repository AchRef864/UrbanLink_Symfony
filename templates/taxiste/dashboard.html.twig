{# templates/taxiste/dashboard.html.twig #}
{% extends 'basef.html.twig' %}

{% block title %}Tableau de bord Taxiste{% endblock %}

{% block body %}
<div class="bg-white shadow-lg rounded-2xl max-w-5xl mx-auto border border-gray-200">

  {# En-tÃªte #}
  <div class="px-6 py-4 rounded-t-2xl bg-indigo-900">
    <h1 class="text-xl font-bold text-white">Tableau de bord du Taxi</h1>
  </div>

  {# Cloche de notifications #}
  <div class="relative text-right p-4">
    <button id="notifToggle"
            class="relative inline-flex items-center p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500">
      <svg class="h-6 w-6 text-gray-700" xmlns="http://www.w3.org/2000/svg" fill="none"
           viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 
                 14.158V11a6 6 0 10-12 0v3.159c0 .538-.214 
                 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 
                 11-6 0v-1m6 0H9"/>
      </svg>
      <span id="notifCount"
            class="absolute -top-1 -right-1 inline-flex items-center justify-center
                   px-1.5 py-0.5 text-xs font-bold text-white bg-red-600 rounded-full hidden">
        0
      </span>
    </button>

    <div id="notifList"
         class="hidden origin-top-right absolute right-4 mt-2 w-80 max-h-96 overflow-y-auto
                bg-white border border-gray-200 rounded-2xl shadow-lg ring-1 ring-black
                ring-opacity-5 transition transform opacity-0 scale-95">
      <ul id="notifItems" class="divide-y divide-gray-100 p-1"></ul>
    </div>
  </div>

  {# Contenu principal #}
  <div class="p-6">

    {# Votre Taxi #}
    <h2 class="text-lg font-semibold">Votre Taxi</h2>
    <div class="mb-4">
      <p class="text-gray-800">
        ðŸ“Œ <span class="font-medium">{{ taxi.marque }} {{ taxi.modele }}</span>
        (<span class="text-sm text-gray-600">{{ taxi.immatriculation }}</span>)
      </p>
      <p class="text-gray-600">Statut : <span class="font-medium">{{ taxi.statut }}</span></p>
    </div>
    <form action="{{ path('taxiste_taxi_change_status', {'id': taxi.id}) }}"
          method="post" class="mb-8 inline-block">
      {% set st = taxi.statut|lower %}
      <button type="submit"
              class="font-bold py-2 px-6 rounded-lg shadow-md transition duration-200
                     {{ st in ['disponible','en course'] 
                        ? 'bg-red-600 hover:bg-red-700 text-white' 
                        : 'bg-green-600 hover:bg-green-700 text-white' }}">
        {% if st in ['disponible','en course'] %}
          Passer en indisponible
        {% else %}
          Passer en disponible
        {% endif %}
      </button>
    </form>

    {# Tableau des Courses #}
    <h2 class="text-lg font-semibold mb-2">Vos Courses</h2>
    <div class="overflow-x-auto">
      <table class="w-full border-collapse bg-white">
        <thead>
          <tr class="bg-gray-100">
            <th class="py-2 px-4 border text-left">Date</th>
            <th class="py-2 px-4 border text-left">DÃ©part</th>
            <th class="py-2 px-4 border text-left">ArrivÃ©e</th>
            <th class="py-2 px-4 border text-left">Distance</th>
            <th class="py-2 px-4 border text-left">Montant</th>
            <th class="py-2 px-4 border text-left">Client</th>
            <th class="py-2 px-4 border text-left">Statut</th>
            <th class="py-2 px-4 border text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {% for course in courses %}
            <tr class="hover:bg-gray-50">
              <td class="py-2 px-4 border">{{ course.dateCourse|date('d/m/Y H:i') }}</td>

              {# on stocke coords "lat, lng" dans data-coords #}
              <td class="py-2 px-4 border">
                <span class="geo" data-coords="{{ course.villeDepart }}">Chargementâ€¦</span>
              </td>
              <td class="py-2 px-4 border">
                <span class="geo" data-coords="{{ course.villeArrivee }}">Chargementâ€¦</span>
              </td>

              <td class="py-2 px-4 border">{{ course.distanceKm }} km</td>
              <td class="py-2 px-4 border">{{ course.montant }} DNT</td>
              <td class="py-2 px-4 border">{{ course.user.name }}</td>
              <td class="py-2 px-4 border">{{ course.statut }}</td>
              <td class="py-2 px-4 border space-x-2">
                {% set cs = course.statut|lower %}
                {% if cs == 'en attente' %}
                  <form action="{{ path('taxiste_course_accept', {'id': course.id}) }}"
                        method="post" class="inline-block">
                    <button type="submit"
                            class="font-bold py-2 px-3 rounded-lg shadow-md transition duration-200
                                   bg-green-500 hover:bg-green-600 text-white">
                      Accepter
                    </button>
                  </form>
                  <form action="{{ path('taxiste_course_refuse', {'id': course.id}) }}"
                        method="post" class="inline-block"
                        onsubmit="return confirm('Refuser cette course ?');">
                    <button type="submit"
                            class="font-bold py-2 px-3 rounded-lg shadow-md transition duration-200
                                   bg-red-500 hover:bg-red-600 text-white">
                      Refuser
                    </button>
                  </form>
                {% elseif cs == 'acceptÃ©e' %}
                  <form action="{{ path('taxiste_course_start', {'id': course.id}) }}"
                        method="post" class="inline-block">
                    <button type="submit"
                            class="font-bold py-2 px-3 rounded-lg shadow-md transition duration-200
                                   bg-indigo-600 hover:bg-indigo-700 text-white">
                      DÃ©clencher
                    </button>
                  </form>
                {% elseif cs == 'en course' %}
                  <form action="{{ path('taxiste_course_finish', {'id': course.id}) }}"
                        method="post" class="inline-block">
                    <button type="submit"
                            class="font-bold py-2 px-3 rounded-lg shadow-md transition duration-200
                                   bg-purple-700 hover:bg-purple-800 text-white">
                      Terminer
                    </button>
                  </form>
                {% else %}
                  <span class="text-sm text-gray-600">â€”</span>
                {% endif %}
              </td>
            </tr>
          {% else %}
            <tr>
              <td colspan="8" class="py-4 px-4 border text-center text-gray-500">
                Aucune course trouvÃ©e.
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>

  </div>
</div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    // --- Notifications pop-up ---
    const toggleBtn  = document.getElementById('notifToggle'),
          notifList  = document.getElementById('notifList'),
          notifItems = document.getElementById('notifItems'),
          notifCount = document.getElementById('notifCount');

    // stopPropagation dans la liste
    notifList.addEventListener('click', e => e.stopPropagation());

    async function toggleNotifications() {
      const hidden = notifList.classList.contains('hidden');
      if (hidden) {
        const resp = await fetch('{{ path("taxiste_notifications_ajax") }}');
        const courses = await resp.json();
        notifItems.innerHTML = '';
        if (courses.length) {
          courses.forEach(c => {
            const dateTxt = c.date ? `<span class="text-sm text-gray-500">le ${c.date}</span>` : '';
            const li = document.createElement('li');
            li.className = `
              bg-white hover:bg-gray-50 rounded-lg p-4 flex space-x-3
              transition-shadow shadow-sm hover:shadow-md cursor-pointer
            `;
            li.innerHTML = `
              <svg class="h-6 w-6 text-indigo-500 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none"
                   viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M3 10l1.528 3.056a9 9 0 0016.944 0L22 10M5 10v6a7 7 0 0014 0v-6"/>
              </svg>
              <div class="flex-1">
                <p class="font-medium text-gray-800">
                  De <span class="font-semibold">${c.depart}</span> Ã  <span class="font-semibold">${c.arrivee}</span>
                </p>
                <div class="mt-1 flex items-center space-x-2">
                  <span class="text-xs text-gray-500">#${c.id}</span>
                  ${dateTxt}
                </div>
              </div>`;
            notifItems.appendChild(li);
          });
          notifCount.textContent = courses.length;
          notifCount.classList.remove('hidden');
        } else {
          const li = document.createElement('li');
          li.className = 'px-4 py-3 text-gray-500 text-center';
          li.textContent = 'Aucune course en attente.';
          notifItems.appendChild(li);
          notifCount.classList.add('hidden');
        }
        notifList.classList.remove('hidden');
        requestAnimationFrame(() => {
          notifList.classList.replace('opacity-0','opacity-100');
          notifList.classList.replace('scale-95','scale-100');
        });
      } else {
        notifList.classList.replace('opacity-100','opacity-0');
        notifList.classList.replace('scale-100','scale-95');
        notifList.addEventListener('transitionend', () => notifList.classList.add('hidden'), { once: true });
      }
    }

    toggleBtn.addEventListener('click', e => {
      e.stopPropagation();
      toggleNotifications();
    });
    document.addEventListener('click', () => {
      if (!notifList.classList.contains('hidden')) toggleNotifications();
    });

    // --- Reverse-geocoding pour le tableau ---
    async function reverseGeocode(lat, lng) {
      const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
      try {
        const r = await fetch(url);
        if (!r.ok) throw '';
        const j = await r.json();
        const addr = j.address || {};
        const city = addr.city || addr.town || addr.village || addr.county || 'Lieu inconnu';
        const road = addr.road || 'Unnamed road';
        return `${city} â€“ ${road}`;
      } catch {
        return `${lat}, ${lng}`;
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('span.geo').forEach(async el => {
        const [lat, lng] = el.dataset.coords.split(',').map(s => s.trim());
        el.textContent = await reverseGeocode(lat, lng);
      });
    });
  </script>
{% endblock %}
