{% extends 'base.html.twig' %}

{% block title %}Edit a Ride{% endblock %}
{% block page_title %}Edit a Ride{% endblock %}

{% block body %}
<div class="bg-white shadow-md rounded-2xl p-6 max-w-4xl mx-auto border border-yellow-300">
  <div class="px-6 py-3 rounded-t-2xl" style="background-color: #FFEB3B;">
    <h1 class="text-xl font-bold" style="color: #FF9800;">Edit a Ride</h1>
  </div>

  {% if form.vars.errors|length > 0 %}
    <div class="mb-4 p-4 bg-red-100 text-red-500 border border-red-300 rounded">
      {{ form_errors(form) }}
    </div>
  {% endif %}

  {# Start form (HTML5 validation disabled) #}
  {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {# Hidden taxi field - filled via map #}
      <div class="mb-4" style="display: none;">
        {{ form_label(form.taxi) }}
        {{ form_widget(form.taxi) }}
        <div class="text-red-500 text-sm mt-1">{{ form_errors(form.taxi) }}</div>
      </div>
      
      <div class="mb-4">
        {{ form_label(form.dateCourse, 'Ride Date') }}
        {{ form_widget(form.dateCourse, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg'}}) }}
        <div class="text-red-500 text-sm mt-1">{{ form_errors(form.dateCourse) }}</div>
      </div>
      
      {# Hidden city fields in the form #}
      <div class="mb-4" style="display: none;">
        {{ form_label(form.villeDepart) }}
        {{ form_widget(form.villeDepart) }}
        <div class="text-red-500 text-sm mt-1">{{ form_errors(form.villeDepart) }}</div>
      </div>
      <div class="mb-4" style="display: none;">
        {{ form_label(form.villeArrivee) }}
        {{ form_widget(form.villeArrivee) }}
        <div class="text-red-500 text-sm mt-1">{{ form_errors(form.villeArrivee) }}</div>
      </div>
      
      {# Display areas for visible selection #}
      <div class="mb-4">
        <label class="block font-medium mb-1">Departure City</label>
        <span id="displayDepart" class="block w-full px-4 py-2 border rounded-lg bg-gray-100"></span>
      </div>
      <div class="mb-4">
        <label class="block font-medium mb-1">Arrival City</label>
        <span id="displayArrivee" class="block w-full px-4 py-2 border rounded-lg bg-gray-100"></span>
      </div>
      
      {# Read-only distance and amount fields #}
      <div class="mb-4">
        {{ form_label(form.distanceKm, 'Distance (km)') }}
        {{ form_widget(form.distanceKm, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg','readonly': 'readonly'}}) }}
      </div>
      <div class="mb-4">
        {{ form_label(form.montant, 'Fare') }}
        {{ form_widget(form.montant, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg','readonly': 'readonly'}}) }}
      </div>
      
      {% if form.statut is defined %}
      <div class="mb-4">
        {{ form_label(form.statut, 'Status') }}
        {{ form_widget(form.statut, {'attr': {'class': 'w-full px-4 py-2 border rounded-lg'}}) }}
        <div class="text-red-500 text-sm mt-1">{{ form_errors(form.statut) }}</div>
      </div>
      {% endif %}
    </div>

    {# Map mode buttons #}
    <div class="mb-4">
      <button type="button" id="selectTaxiBtn" class="mode-btn bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-2 rounded">Taxi</button>
      <button type="button" id="selectDepartBtn" class="mode-btn bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-2 rounded">Departure</button>
      <button type="button" id="selectArriveeBtn" class="mode-btn bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-2 rounded">Arrival</button>
      <span id="selectionModeDisplay" class="ml-4 font-semibold">Mode: Taxi selection</span>
    </div>

    {# Map container #}
    <div class="mb-4">
      <label class="block font-medium mb-2">Interact with the map :</label>
      <div id="userMapDiv" style="height: 500px; width: 100%; border: 1px solid #ccc;"></div>
    </div>

    <div class="mt-6 flex justify-between items-center">
      <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg shadow-md transition">
        Save
      </button>
      <a href="{{ path('course_index') }}" class="text-sm text-slate-500 hover:underline">‚Üê Back to list</a>
    </div>
  {{ form_end(form) }}
</div>
{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    .active-mode {
      background-color: #4F46E5 !important;
      color: white !important;
    }
  </style>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <link rel="stylesheet" href="https://js.arcgis.com/4.25/esri/themes/light/main.css">
  <script src="https://js.arcgis.com/4.25/" defer></script>
  <script>
    window.addEventListener("load", function () {
      require([
        "esri/Map",
        "esri/views/MapView",
        "esri/Graphic",
        "esri/geometry/geometryEngine"
      ], function(Map, MapView, Graphic, geometryEngine) {

        // Variables to store markers and selections
        var departMarker = null;
        var arriveeMarker = null;
        var selectedTaxiMarker = null;
        var selectedTaxiRate = null;
        var selectionMode = "taxi"; // Modes: "taxi", "depart", "arrivee"
        document.getElementById("selectionModeDisplay").textContent = "Mode: Taxi selection";

        // Function to update mode buttons
        function updateModeButtons(activeButtonId) {
          var modeButtons = document.querySelectorAll(".mode-btn");
          modeButtons.forEach(function(button) {
            button.classList.remove("active-mode");
          });
          document.getElementById(activeButtonId).classList.add("active-mode");
        }

        // Buttons to change mode
        document.getElementById("selectTaxiBtn").addEventListener("click", function () {
          selectionMode = "taxi";
          document.getElementById("selectionModeDisplay").textContent = "Mode: Taxi selection";
          updateModeButtons("selectTaxiBtn");
          console.log("Taxi mode activated");
        });
        document.getElementById("selectDepartBtn").addEventListener("click", function () {
          selectionMode = "depart";
          document.getElementById("selectionModeDisplay").textContent = "Mode: Departure selection";
          updateModeButtons("selectDepartBtn");
          console.log("Departure mode activated");
        });
        document.getElementById("selectArriveeBtn").addEventListener("click", function () {
          selectionMode = "arrivee";
          document.getElementById("selectionModeDisplay").textContent = "Mode: Arrival selection";
          updateModeButtons("selectArriveeBtn");
          console.log("Arrival mode activated");
        });

        var map = new Map({ basemap: "streets-navigation-vector" });
        var view = new MapView({
          container: "userMapDiv",
          map: map,
          center: [10.18, 36.80],
          zoom: 12
        });

        function addMarker(geometry, color, size) {
          return new Graphic({
            geometry: geometry,
            symbol: { type: "simple-marker", color: color, size: size || "12px" }
          });
        }

        function computeDistance(from, to) {
          return geometryEngine.distance(from, to, "kilometers");
        }

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            var userLng = position.coords.longitude;
            var userLat = position.coords.latitude;
            view.center = [userLng, userLat];
            var userMarker = addMarker({ type: "point", longitude: userLng, latitude: userLat }, "red", "14px");
            view.graphics.add(userMarker);

            fetch("{{ path('get_nearby_taxis') }}?longitude=" + userLng + "&latitude=" + userLat)
              .then(response => response.json())
              .then(function (data) {
                data.forEach(function (taxi) {
                  var taxiPoint = { type: "point", longitude: taxi.longitude, latitude: taxi.latitude };
                  var taxiMarker = addMarker(taxiPoint, "blue", "12px");
                  taxiMarker.attributes = {
                    taxiId: taxi.id,
                    immatriculation: taxi.immatriculation,
                    tarifBase: taxi.tarifBase
                  };
                  view.graphics.add(taxiMarker);
                });
              })
              .catch(function (error) {
                console.error("Error fetching taxis: ", error);
              });
          });
        } else {
          console.warn("Geolocation is not supported by this browser.");
        }

        // Map click handling
        view.on("click", function (event) {
          if (selectionMode === "depart") {
            var clickedPoint = event.mapPoint;
            var lat = clickedPoint.latitude || clickedPoint.y;
            var lng = clickedPoint.longitude || clickedPoint.x;
            var coordText = lat.toFixed(4) + ", " + lng.toFixed(4);
            document.getElementById('{{ form.villeDepart.vars.id }}').value = coordText;
            document.getElementById("displayDepart").textContent = coordText;
            console.log("Departure selected: ", coordText);
            if (departMarker) { view.graphics.remove(departMarker); }
            departMarker = addMarker(clickedPoint, "orange", "12px");
            view.graphics.add(departMarker);
          } else if (selectionMode === "arrivee") {
            var clickedPoint = event.mapPoint;
            var lat = clickedPoint.latitude || clickedPoint.y;
            var lng = clickedPoint.longitude || clickedPoint.x;
            var coordText = lat.toFixed(4) + ", " + lng.toFixed(4);
            document.getElementById('{{ form.villeArrivee.vars.id }}').value = coordText;
            document.getElementById("displayArrivee").textContent = coordText;
            console.log("Arrival selected: ", coordText);
            if (arriveeMarker) { view.graphics.remove(arriveeMarker); }
            arriveeMarker = addMarker(clickedPoint, "purple", "12px");
            view.graphics.add(arriveeMarker);
          } else if (selectionMode === "taxi") {
            view.hitTest(event).then(function (response) {
              var results = response.results;
              var taxiResult = results.find(function (result) {
                return result.graphic.attributes && result.graphic.attributes.taxiId;
              });
              if (taxiResult) {
                if (selectedTaxiMarker) {
                  selectedTaxiMarker.symbol.color = "blue";
                  view.graphics.refresh();
                }
                selectedTaxiRate = taxiResult.graphic.attributes.tarifBase;
                console.log("Selected taxi, Rate:", selectedTaxiRate);
                view.graphics.remove(taxiResult.graphic);
                selectedTaxiMarker = addMarker(taxiResult.graphic.geometry, "green", "14px");
                selectedTaxiMarker.attributes = taxiResult.graphic.attributes;
                view.graphics.add(selectedTaxiMarker);
                document.getElementById('{{ form.taxi.vars.id }}').value = taxiResult.graphic.attributes.taxiId;
              } else {
                console.log("No taxi detected in taxi mode.");
              }
            });
          }

          if (departMarker && arriveeMarker && selectedTaxiRate) {
            var distanceKm = computeDistance(departMarker.geometry, arriveeMarker.geometry);
            document.getElementById('{{ form.distanceKm.vars.id }}').value = distanceKm.toFixed(2);
            var montant = distanceKm * selectedTaxiRate;
            document.getElementById('{{ form.montant.vars.id }}').value = montant.toFixed(2);
            console.log("Distance:", distanceKm, "Amount:", montant);
          }
        });
      });
    });
  </script>
{% endblock %}